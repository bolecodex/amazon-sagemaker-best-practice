#!/usr/bin/env python

# This file implements the scoring service shell. You don't necessarily need to modify it for various
# algorithms. It starts nginx and gunicorn with the correct configurations and then simply waits until
# gunicorn exits.
#
# The flask server is specified to be the app object in wsgi.py
#
# We set the following parameters:
#
# Parameter                Environment Variable              Default Value
# ---------                --------------------              -------------
# number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
# timeout                  MODEL_SERVER_TIMEOUT              60 seconds

from __future__ import print_function
import multiprocessing
import os
import signal
import subprocess
import sys

# 获取系统的CPU数量
cpu_count = multiprocessing.cpu_count()

# 获取环境变量对应的环境变量，如果不存在，则返回对应的默认值。
model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count))

def sigterm_handler(nginx_pid, gunicorn_pid):
    try:
        # 无条件终止nginx服务，且退出代码为 signal.SIGQUIT， signal.SIGTERM 退出信号
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        # 无条件终止gunicorn服务，且退出代码为 signal.SIGTERM， signal.SIGTERM 终结信号
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)

def start_server():
    print('Starting the inference server with {} workers.'.format(model_server_workers))

    # link the log streams to stdout/err so they will be logged to the container logs
    # check_call:运行参数中的命令， 标准输出， 标准错误 定向到对应的日志。
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    # 在一个新的进程中执行子程序。
    nginx = subprocess.Popen(['nginx', '-c', '/opt/program/nginx.conf'])

    gunicorn = subprocess.Popen(['gunicorn',
                                 '--timeout', str(model_server_timeout),
                                 '-k', 'gevent',
                                 '-b', 'unix:/tmp/gunicorn.sock',
                                 '-w', str(model_server_workers),
                                 'wsgi:app'])
    # signal.signal(signalnum, handler)： 将信号 signalnum 的处理程序设为函数 handler
    # signal.SIGTERM 终结信号
    # lambda： lambda 参数列列表 ： 表达式 . 
    # 例； 
    # add = lambda x,y:x+y  
    # print(add(3,4))
    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # If either subprocess exits, so do we.
    # 创建一个set集合
    pids = set([nginx.pid, gunicorn.pid])
    # 循环遍历
    while True:
        pid, _ = os.wait() # 等待子进程执行完毕，返回一个元组，包含其 pid 和退出状态指示
        if pid in pids:
            break

    sigterm_handler(nginx.pid, gunicorn.pid)
    print('Inference server exiting')

# The main routine just invokes the start function.

if __name__ == '__main__':
    start_server()
